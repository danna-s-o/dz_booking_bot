# booking_bot/handlers/booking.py

import logging

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from utils.texts import *
from keyboards.inline_keyboards import *
from state.state import *
from handlers.is_valid import *
from dicts.preferences import *
from database.crud import *
from handlers.payment import cmd_send_invoice

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command('start'))
async def cmd_start(message: Message):
    await message.answer(start_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@router.message(Command('menu'))
async def cmd_start(message: Message):
    await message.answer(menu_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /available
@router.message(Command('available'))
async def cmd_check_date(message: Message, state: FSMContext):
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥\n"
                         "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.25</code>",
                                           parse_mode=ParseMode.HTML)
    await state.set_state(CheckingDateProcess.set_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –¥–∞—Ç—ã
@router.message(CheckingDateProcess.set_date)
async def cmd_set_date(message: Message, state: FSMContext):
    checking_date = message.text

    if is_valid_date(checking_date):
        await state.update_data(date=message.text)
        await message.answer("üïô –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM\n"
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30</code>",
                                               parse_mode=ParseMode.HTML)
        await state.set_state(CheckingDateProcess.set_time)
    else:
        await message.answer('‚ùå –î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞. '
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥\n'
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.25</code>",
                             parse_mode=ParseMode.HTML
                             )
        await state.set_state(CheckingDateProcess.set_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —á–∞—Å–æ–≤
@router.message(CheckingDateProcess.set_time)
async def cmd_set_time(message: Message, state: FSMContext):
    checking_time = message.text
    user_data = await state.get_data()

    if is_valid_time(checking_time, user_data['date']):
        if is_working_hours(checking_time, user_data['date']):
            await state.update_data(time=message.text)
            user_data = await state.get_data()
            available_tables = get_available_tables(user_data['date'], user_data['time'])
            if available_tables:
                response = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–∏–∫–∏</b>:\n\n"
                for location, capacity, count in available_tables:
                    response += (
                        f"–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {location}\n"
                        f"üë• –ü–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç: {capacity}\n"
                        f"‚úîÔ∏è –°–≤–æ–±–æ–¥–Ω–æ: {count}\n\n"
                    )
                response += "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é, –Ω–∞–∂–º–∏—Ç–µ /book\n\n‚ò∞ /menu"
                await message.answer(response, parse_mode=ParseMode.HTML)
            else:
                await message.answer("‚ùå –ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –Ω–µ—Ç.\n"
                                     "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –¥–∞—Ç—É.\n\n‚ò∞ /menu")

            await state.clear()
        else:
            await message.answer(not_working_time_text)
            await state.set_state(CheckingDateProcess.set_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /book
@router.message(Command('book'))
async def cmd_book(message: Message):
    await message.answer('–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫?', reply_markup=ready_or_not_kb())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ "ready"
@router.callback_query(F.data == 'ready')
async def cmd_ready(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥\n"
                                           "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.25</code>",
                                           parse_mode=ParseMode.HTML
                                           )
    await state.set_state(BookingProcces.choosing_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ "not_ready"
@router.callback_query(F.data == 'not_ready')
async def cmd_not_ready(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–•–æ—Ä–æ—à–æ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —Å—Ç–æ–ª–∏–∫–∞, "
                                           "–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫–æ –º–Ω–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /book\n\n‚ò∞ /menu")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
@router.message(BookingProcces.choosing_date)
async def cmd_choosing_date(message: Message, state: FSMContext):
    user_date = message.text

    if is_valid_date(user_date):
        await state.update_data(date=user_date)
        await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {user_date} "
                             f"\nüïô –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:40</code>",
                             parse_mode=ParseMode.HTML
                             )

        await state.set_state(BookingProcces.choosing_time)
    else:
        await message.answer('‚ùå –î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–∞. '
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥\n'
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 31.12.25</code>",
                             parse_mode=ParseMode.HTML
                             )
        await state.set_state(BookingProcces.choosing_date)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.message(BookingProcces.choosing_time)
async def cmd_choosing_time(message: Message, state: FSMContext):
    user_time = message.text
    user_date = await state.get_data()

    if is_valid_time(user_time, user_date['date']):
        if is_working_hours(user_time, user_date['date']):

            await state.update_data(time=message.text)
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {user_time}\n"
                                 f"üë• –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π.\n"
                                 "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 4</code>",
                                 parse_mode=ParseMode.HTML
                                 )
            await state.set_state(BookingProcces.set_quantity_of_guests)

        else:
            await message.answer(not_working_time_text)
            await state.set_state(BookingProcces.choosing_time)

    else:
        await message.answer('‚ùå –í—Ä–µ–º—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–ª–∏ —É–∂–µ –ø—Ä–æ—à–ª–æ. '
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n'
                             "<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 13:40</code>",
                             parse_mode=ParseMode.HTML
                             )
        await state.set_state(BookingProcces.choosing_time)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π
@router.message(BookingProcces.set_quantity_of_guests)
async def cmd_set_quantity_of_guests(message: Message, state: FSMContext):
    try:
        user_guests = int(message.text)

        if 0 < user_guests <= 6:
            await state.update_data(guests=user_guests)
            await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π: {message.text}\n"
                                 f"üóíÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n"
                                 f"–ö–∞–∫–æ–π —Å—Ç–æ–ª–∏–∫ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?", reply_markup=preferences_kb())
            await state.set_state(BookingProcces.set_preferences)

        elif user_guests > 6:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –Ω–∞—à–µ–º —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –Ω–µ—Ç —Å—Ç–æ–ª–∏–∫–æ–≤ –¥–ª—è —Ç–∞–∫–æ–≥–æ '
                                 '–∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ—Å—Ç–µ–π. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ '
                                 '—Å –¥—Ä—É–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /book')
            await state.clear()

        else:
            await message.answer('‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. '
                                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0\n'
                                 '<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 4</code>',
                                 parse_mode=ParseMode.HTML
                                 )
            await state.set_state(BookingProcces.set_quantity_of_guests)

    except ValueError:
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –∏–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ.\n'
                             '<code>–ù–∞–ø—Ä–∏–º–µ—Ä: 4</code>',
                             parse_mode=ParseMode.HTML
                             )
        await state.set_state(BookingProcces.set_quantity_of_guests)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
@router.callback_query(BookingProcces.set_preferences, F.data.in_(preferences_dict))
async def cmd_set_preferences(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_preferences = preferences_dict[callback_query.data].lower()
    await state.update_data(preferences=user_preferences)
    user_data = await state.get_data()

    if user_preferences == '—É –æ–∫–Ω–∞' and user_data['guests'] > 4:
        await callback_query.message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É —Å—Ç–æ–ª–∏–∫–æ–≤ —É –æ–∫–Ω–∞ –Ω–µ—Ç {user_data['guests']} '
                                            f'–ø–æ—Å–∞–¥–æ—á–Ω—ã—Ö –º–µ—Å—Ç, –Ω–æ –º—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∏–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä '
                                            f'–≤ –ø–æ–ª—å–∑—É —Å—Ç–æ–ª–∏–∫–∞ –≤ –∑–∞–ª–µ')
    else:

        if is_table_available(user_data['date'], user_data['time'], user_data['guests'], user_data['preferences']):

            text = (f"<b>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
                f"‚Ä¢ –ú–µ—Å—Ç–æ —Å—Ç–æ–ª–∏–∫–∞: {user_data['preferences']}\n"
                f"‚Ä¢ –ì–æ—Å—Ç–∏: {user_data['guests']}\n"
                f"‚Ä¢ –î–∞—Ç–∞: {user_data['date']}\n"
                f"‚Ä¢ –í—Ä–µ–º—è: {user_data['time']}\n\n"
                f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ?")

            await callback_query.message.answer(f"{text}", parse_mode=ParseMode.HTML,
                                                   reply_markup=confirm_kb())
            await state.set_state(BookingProcces.confirm_booking)
        else:
            await callback_query.message.answer('üö´ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ—Ç.\n'
                                                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –±—Ä–æ–Ω–∏ —Å—Ç–æ–ª–∏–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /available\n\n'
                                                '‚ò∞ /menu')
            await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏
@router.callback_query(BookingProcces.confirm_booking, F.data == 'yes')
async def cmd_confirm_booking(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer('üë§ –£–∫–∞–∂–∏—Ç–µ, –Ω–∞ —á—å–µ –∏–º—è –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –±—Ä–æ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è')
    await state.set_state(BookingProcces.get_name_surname)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
@router.message(BookingProcces.get_name_surname)
async def cmd_get_name_surname(message: Message, state: FSMContext):
    try:
        user_name, user_surname = map(str, message.text.split(' '))
        await state.update_data(name=user_name, surname=user_surname, telegram_id=message.chat.id)

        await state.set_state(None)

        await message.answer('üí≥ –î–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–µ –æ–ø–ª–∞—Ç–∏—Ç—å. '
                             '–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —ç—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏',
                             reply_markup=proceed_to_payment_kb())

    except ValueError:
        await message.answer('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
        await state.set_state(BookingProcces.get_name_surname)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã –±—Ä–æ–Ω–∏
@router.callback_query(F.data == 'proceed_to_payment')
async def cmd_waiting_for_payment(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    message = callback_query.message

    # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞
    try:
        await cmd_send_invoice(message, state)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞. "
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n\n‚ò∞ /menu")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏
@router.callback_query(BookingProcces.confirm_booking, F.data == 'no')
async def cmd_cancel_booking(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. "
                                           "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, "
                                           "–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /book\n\n‚ò∞ /menu")
    await state.clear()


@router.message(Command('my_bookings'))
async def cmd_my_bookings(message: Message):
    telegram_id = message.from_user.id
    bookings = get_user_bookings(telegram_id)

    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.\n"
                             "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫, –Ω–∞–∂–º–∏—Ç–µ /book\n\n‚ò∞ /menu")
        return

    response = "<b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
    for booking in bookings:
        response += (
            f"üÜî –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏: {booking[0]}\n"
            f"üÜî –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {booking[1]}\n"
            f"–î–∞—Ç–∞: {booking[2]}\n"
            f"–í—Ä–µ–º—è: {booking[3]}\n"
            f"–ì–æ—Å—Ç–∏: {booking[4]}\n"
            f"–ú–µ—Å—Ç–æ —Å—Ç–æ–ª–∏–∫–∞ {booking[5]}\n"
            f"–ù–∞ –∏–º—è: {booking[6]} {booking[7]}\n\n"
        )

    await message.answer(response, parse_mode=ParseMode.HTML)


@router.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    telegram_id = message.from_user.id
    bookings = get_user_bookings(telegram_id)

    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        return

    response = "<b>–í–∞—à–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n\n"
    for booking in bookings:
        response += (
            f"üÜî –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏: {booking[0]}\n"
            f"üÜî –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {booking[1]}\n"
            f"–î–∞—Ç–∞: {booking[2]}\n"
            f"–í—Ä–µ–º—è: {booking[3]}\n"
            f"–ì–æ—Å—Ç–∏: {booking[4]}\n"
            f"–ú–µ—Å—Ç–æ —Å—Ç–æ–ª–∏–∫–∞ {booking[5]}\n"
            f"–ù–∞ –∏–º—è: {booking[6]} {booking[7]}\n\n"
        )

    await message.answer(response, parse_mode=ParseMode.HTML)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ id –Ω–æ–º–µ—Ä –±—Ä–æ–Ω–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å')
    await state.set_state(CancellingProccess.choosing_id)

@router.message(CancellingProccess.choosing_id)
async def cmd_choosing_id(message: Message, state: FSMContext):
    try:
        reservation_id = int(message.text)
        telegram_id = message.chat.id

        if delete_reservation(reservation_id, telegram_id):
            await message.answer(f'‚úÖ –ë—Ä–æ–Ω—å ‚Ññ{reservation_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.')
            await message.answer(
                '–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –±—Ä–æ–Ω–µ–π –Ω–∞–∂–º–∏—Ç–µ /my_bookings\n'
                '–î–ª—è –Ω–æ–≤–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /book\n\n‚ò∞ /menu'
            )
            await state.clear()
        else:
            await message.answer(
                '‚ùå –ë—Ä–æ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ id –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel\n\n‚ò∞ /menu'
            )
            await state.clear()

    except ValueError:
        await message.answer(
            '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 123\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /cancel\n\n‚ò∞ /menu'
        )
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ cmd_choosing_id: {e}", exc_info=True)
        await message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ\n\n‚ò∞ /menu'
        )
        await state.clear()

@router.message(F.text)
async def cmd_text(message: Message):
    await message.answer('–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –ø–æ –æ–¥–Ω–æ–π –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ /menu')



